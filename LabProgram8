/* Merge Sort */

#include<stdio.h>
#include<time.h>
void merge(int a[],int s,int m,int e)
{
    delay();
    int merged[e-s+1];
    int i=s,j=m+1,k=0;
    while(i<=m && j<=e)
    {
        if(a[i]<a[j])
        {
            merged[k]=a[i];
            i++;
            k++;
        }
        else
        {
            merged[k]=a[j];
            j++;
            k++;
        }
    }
    while(i<=m)
    {
        merged[k]=a[i];
        i++;
        k++;
    }
    while(j<=e)
    {
        merged[k]=a[j];
        j++;
        k++;
    }
    for(int p=0;p<e-s+1;p++)
        a[s+p]=merged[p];
}
void delay()
{
    int temp ;
    for(int i=0 ;i<50000;i++)
        temp=46/4748;
}

void mergeSort(int a[],int s,int e)
{
    if(e-s+1 == 1)
        return;

    int mid=(s+e)/2;
    mergeSort(a,s,mid);
    mergeSort(a,mid+1,e);
    merge(a,s,mid,e);
}

void main()
{
    int n;
    clock_t start,end;
    printf("Enter the number of elements\n");
    scanf("%d",&n);
    int nums[n];
    for(int i=0;i<n;i++)
        nums[i]=rand();
    start=clock();
    mergeSort(nums,0,n-1);
    end=clock();
    printf("AFTER SORTING\n");
    for(int i=0;i<n;i++)
        printf("%d ",nums[i]);
    printf("\n\nTime taken:%lf\n",(double)(end-start)/CLOCKS_PER_SEC);
}
